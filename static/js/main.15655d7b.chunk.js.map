{"version":3,"sources":["utils/dbCalls.js","utils/apiCalls.js","components/ImdbMovie/index.js","components/SubmissionForm/index.js","components/Home/index.js","components/MoveDetails/index.js","components/NominatedMovieList/index.js","components/Header/index.js","App.js","reportWebVitals.js","index.js"],"names":["axios","require","dbCalls","findAll","get","addMovie","nominatedMovieData","post","deleteMovie","movieId","module","exports","apiCalls","imdbMovieSearch","userSearchString","ImdbMovie","movieInfo","nominatedmovieids","updateNomineesList","clearMovieData","useState","statusMessage","setStatusMessage","movieHasBeenNominated","setMovieHasBeenNominated","useEffect","checkIfMovieHasBeenNominated","imdbID","indexOf","Title","onClick","event","preventDefault","dbCall","then","movieAddedToDb","catch","err","console","log","imdbid","Year","Actors","Plot","src","Poster","alt","length","SubmissionForm","props","returnedMovieInfo","setReturnedMovieInfo","setUserSearchString","handleMovieSearch","a","apiCall","movieName","imdbMovieData","data","action","method","type","name","value","onChange","inputChange","target","required","Home","nominatedMovieIds","setNominatedMovieIds","fiveMoviesNominated","setFiveMoviesNominated","checkIfFiveMoviesHaveBeenNominated","db","nominatedMovies","buildArrOfMovieIdsInDb","movies","movieIdsArr","map","movie","push","href","MovieDetails","title","data-movieid","id","dataset","movieid","NominatedMoviesList","nomineesList","setNomineesList","Header","Container","fluid","Row","App","exact","path","component","NominatedMovieList","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15655d7b.chunk.js","sourcesContent":["const axios = require('axios');\n\nconst dbCalls = {\n  //findOne: (movieId) => {\n  //  //console.log('------------------dbCalls util fired with FindOne', movieId);\n  //  return axios.get('/db/findOne/', { imdbID: movieId });\n  //},\n  findAll: () => {\n    //console.log('------------------dbCalls util fired with FindAll');\n    return axios.get('/db/findAll');\n  },\n  addMovie: (nominatedMovieData) => {\n    //console.log('------------------dbCalls util fired with addMovie with data', nominatedMovieData);\n    return axios.post('/db/addMovie', nominatedMovieData);\n  },\n  deleteMovie: (movieId) => {\n    //console.log('------------------dbCalls util fired with delete Movie with data', movieId);\n    return axios.post('/db/deleteMovie', movieId);\n  }\n}\n\nmodule.exports = dbCalls","const axios = require('axios');\n\nconst apiCalls = {\n  imdbMovieSearch: (userSearchString) => {\n    //console.log('------------------imdbMovieSearch util fired with userSearchString ', userSearchString);\n    return axios.post('/imdb/findMovie', userSearchString)\n  }\n}\n\nmodule.exports = apiCalls","import React, { useState, useEffect } from \"react\";\nimport dbCall from '../../utils/dbCalls';\n\nconst ImdbMovie = ({ movieInfo, nominatedmovieids, updateNomineesList, clearMovieData }) => {\n\n  const [statusMessage, setStatusMessage] = useState('');\n  const [movieHasBeenNominated, setMovieHasBeenNominated] = useState(false);\n\n\n  useEffect(() => {\n    checkIfMovieHasBeenNominated(movieInfo.imdbID);\n  }, [movieInfo])\n\n  const handleNomination = function (event) {\n    event.preventDefault();\n    dbCall.addMovie(movieInfo)\n      .then((movieAddedToDb) => {\n        if (movieAddedToDb) {\n          setStatusMessage(\n            `You have nominated '${movieInfo.Title}' for the Shopify Ecommerce Movie Awards`\n          );\n          updateNomineesList();\n          clearMovieData();\n          return movieAddedToDb;\n        } else {\n          return;\n        }\n      })\n      .catch(err => console.log(err))\n  }\n\n  const checkIfMovieHasBeenNominated = (imdbID) => {\n    if (nominatedmovieids.indexOf(imdbID) === -1) {\n      setMovieHasBeenNominated(false);\n      return;\n    } else {\n      setMovieHasBeenNominated(true);\n    }\n  }\n\n\n  if (movieInfo.Title) {\n    return (\n      <>\n        {movieHasBeenNominated ?\n          < h2 > Looks like this movie has already been nominated</h2>\n          :\n          <button\n            onClick={handleNomination}\n            imdbid={movieInfo.imdbID}\n          >\n            Nominate This Movie\n        </button>\n        }\n        <h1>{movieInfo.Title}</h1>\n        <h3>{movieInfo.Year}</h3>\n        <div> With {movieInfo.Actors}</div>\n        <div>{movieInfo.Plot}</div>\n        <img src={movieInfo.Poster} alt=\"Movie Poster\" />\n\n      </>\n    )\n  } else if (nominatedmovieids.length < 4) {\n    return (\n      <>\n        <h3>{statusMessage}</h3>\n        <h4>You can nominate {5 - nominatedmovieids.length} more movies.</h4>\n      </>\n    )\n  } else {\n    return (\n      <>\n        <h3>{statusMessage}</h3>\n        <h4>You can nominate {5 - nominatedmovieids.length} more movie.</h4>\n      </>\n    )\n  }\n\n};\n\nexport default ImdbMovie;","import React, { useState, useEffect } from \"react\";\nimport apiCall from '../../utils/apiCalls';\nimport ImdbMovie from '../ImdbMovie'\n\nconst SubmissionForm = (props) => {\n\n  const [returnedMovieInfo, setReturnedMovieInfo] = useState({});\n  const [userSearchString, setUserSearchString] = useState('');\n\n  useEffect(() => {\n    //console.log(returnedMovieInfo);\n  }, [returnedMovieInfo])\n\n  const handleInputChange = inputChange => {\n    setUserSearchString(inputChange.target.value);\n  }\n\n  const handleMovieSearch = async function (event) {\n    event.preventDefault();\n    //console.log('------------------userSearchString', userSearchString);\n    apiCall.imdbMovieSearch({ movieName: userSearchString })\n      .then((imdbMovieData) => {\n        //console.log('data returned to React component ', imdbMovieData);\n        setReturnedMovieInfo(imdbMovieData.data);\n        setUserSearchString('');\n        return imdbMovieData.data;\n      })\n      .catch(err => console.log(err));\n  }\n\n  const clearMovieData = () => {\n    setReturnedMovieInfo({});\n    setUserSearchString('');\n    return;\n  }\n\n  return (\n    <>\n      <h1>Submission Form</h1>\n      <form action=\"/imdb/findMovie\" method=\"POST\">\n        <div>\n          <label>Movie Title:</label>\n          <input type=\"text\" name=\"movieName\" value={userSearchString} onChange={handleInputChange} required />\n        </div>\n        <div>\n          <button type=\"submit\" value=\"Submit\" onClick={handleMovieSearch}>Find Your Movie</button>\n        </div>\n      </form>\n      <ImdbMovie\n        movieInfo={returnedMovieInfo}\n        nominatedmovieids={props.nominatedmovieids}\n        updateNomineesList={props.updateNomineesList}\n        clearMovieData={clearMovieData}\n      />\n    </>\n  )\n}\n\nexport default SubmissionForm;","import { useEffect, useState } from 'react';\nimport db from '../../utils/dbCalls'\nimport SubmissionForm from '../SubmissionForm';\n\nconst Home = () => {\n\n  //const [moviesInDb, setMoviesInDb] = useState([]);\n  const [nominatedMovieIds, setNominatedMovieIds] = useState([]);\n  const [fiveMoviesNominated, setFiveMoviesNominated] = useState(false);\n\n  useEffect(() => {\n    updateNomineesList();\n  }, [])\n\n  useEffect(() => {\n    checkIfFiveMoviesHaveBeenNominated()\n  }, [nominatedMovieIds])\n\n  const updateNomineesList = () => {\n    db.findAll()\n      .then((nominatedMovies) => {\n        //console.log('nominated movies', nominatedMovies);\n        if (!nominatedMovies) {\n          return;\n        } else {\n          //setMoviesInDb(nominatedMovies.data);\n          buildArrOfMovieIdsInDb(nominatedMovies.data);\n          return nominatedMovies;\n        }\n      })\n    //.then((nominatedMovies) => {\n    //})\n  }\n\n  const buildArrOfMovieIdsInDb = (movies) => {\n    //console.log('building array of movies in db with', movies);\n    let movieIdsArr = [];\n    movies.map(movie => {\n      //console.log('building movie id array with ', movie.imdbID);\n      return movieIdsArr.push(movie.imdbID);\n    })\n    setNominatedMovieIds(movieIdsArr);\n    return movieIdsArr;\n  }\n\n  const checkIfFiveMoviesHaveBeenNominated = () => {\n    //console.log('checking if five movies have been nominated', nominatedMovieIds.length);\n    //console.log('five movies have been nominated?', fiveMoviesNominated);\n    if (nominatedMovieIds.length > 4) {\n      setFiveMoviesNominated(true);\n      return true;\n    } else {\n      setFiveMoviesNominated(false);\n      return false;\n    }\n  }\n\n  return (\n    <>\n      <a href=\"/nominatedMovies\">Click Here to See The Nominated Movies</a>\n      {fiveMoviesNominated ?\n        <>\n          <h3>Congratulations! You have nominated 5 of your favorite films for the Shopify Ecommerce Movie Awards!</h3>\n          <h4>You can see which movies you have nominated using the link above and remove any unwanted choices.</h4>\n          <h4>Thanks for helping us choose the film of the year!</h4>\n        </>\n        :\n        <SubmissionForm\n          nominatedmovieids={nominatedMovieIds}\n          updateNomineesList={updateNomineesList}\n          nominatedMovieIds={nominatedMovieIds}\n        />\n      }\n    </>\n  )\n};\n\nexport default Home;","const MovieDetails = props => {\n\n  const handleDeleteMovie = (event) => {\n    event.preventDefault();\n    //console.log('handle deleteMovie event', event);\n    let movieId = { imdbID: event.target.dataset.movieid };\n    props.db.deleteMovie(movieId)\n      .then(props.updateNomineesList)\n      .catch(err => console.log(err));\n  }\n  //console.log('props passed to MovieDetails component', props);\n  return (\n    <>\n      <h2>{props.title}</h2>\n      <button\n        data-movieid={props.id}\n        onClick={handleDeleteMovie}\n      >\n        Remove\n      </button>\n    </>\n  )\n};\n\nexport default MovieDetails","import React, { useState, useEffect } from \"react\";\nimport dbCalls from '../../utils/dbCalls';\nimport MovieDetails from '../MoveDetails'\n\nconst NominatedMoviesList = () => {\n  const [nomineesList, setNomineesList] = useState()\n\n  useEffect(() => {\n    updateNomineesList();\n  }, [])\n\n  const updateNomineesList = () => {\n    dbCalls.findAll()\n      .then((nominatedMovies) => {\n        if (!nominatedMovies) {\n          return\n        } else {\n          //console.log('movies returned from db', nominatedMovies);\n          setNomineesList(nominatedMovies);\n        }\n      })\n      .then(() => console.log('nomineesList updated with', nomineesList))\n  }\n\n  return (\n    <>\n      <div><a href='/'>Back to Nomination Page</a></div>\n      {/*{console.log('nomineesList in return statemet', nomineesList)}*/}\n      {nomineesList ?\n        nomineesList.data.map(movie => {\n          return <MovieDetails\n            title={movie.Title}\n            id={movie.imdbID}\n            key={movie.imdbID}\n            db={dbCalls}\n            updateNomineesList={updateNomineesList} />\n        }\n        )\n        :\n        <>\n          <h2>{`No movies have been nominated :(`}</h2>\n          <a href='/'>\n            Click Here to Find and Nominate Your Favorite Movie!\n          </a>\n        </>\n      }\n    </>\n  )\n}\n\nexport default NominatedMoviesList;","import Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nconst Header = () => {\n\n  return (\n    <Container fluid>\n      <Row>\n        <h2>The Shopify Ecommerce Movie Awards Nominations</h2>\n      </Row>\n    </Container>\n  )\n}\n\nexport default Header;","import './App.css';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from './components/Home';\nimport NominatedMovieList from './components/NominatedMovieList';\nimport Header from './components/Header';\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <Route exact path='/' component={Home} />\n      <Route exact path='/nominatedMovies' component={NominatedMovieList} />\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}